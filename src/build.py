'''
Created on Sep 8, 2010

@author: Michael Liao
'''

import re
import os
import logging
from framework import view

PACKAGE_EXCLUDES = (
        r'^.*\.pyc$',                    # *.pyc
        r'^\/[a-zA-Z0-9\_]+\/view\/.*$', # /*/view/**
        r'^.*\_test$',                   # *_test
        r'^.*\_test\.py',                # *_test.py
        r'^\/build\.py$',                # /build.py
)

REGEX_EXCLUDES = []
for regex in PACKAGE_EXCLUDES:
    REGEX_EXCLUDES.append(re.compile(regex))

def main():
    '''
    Build ExpressMe by package() and deploy().
    '''
    root = os.path.split(__file__)[0]
    compile_view(root)
    package(root)

def package(root_path):
    '''
    Compile all views and make a zip file.
    '''
    fs = os.listdir(root_path)

def compile_view(root_path):
    all_appdirs = os.listdir(root_path)
    appdirs = [app for app in all_appdirs if os.path.isdir(os.path.join(root_path, app, 'view'))]
    appdirs.sort()
    count = 0
    for app in appdirs:
        count += _compile_dir(root_path, app)
    # make sure __init__.py under root_path/compiled:
    _gen_init_py(os.path.join(root_path, 'compiled'))
    logging.info('%d files compiled.' % count)

def _compile_dir(root_path, app):
    all_views = os.listdir(os.path.join(root_path, app, 'view'))
    views = [v for v in all_views if os.path.isfile(os.path.join(root_path, app, 'view', v))]
    count = 0
    for v in views:
        if v.endswith('.html'):
            mod_name = v[:-5]
            content = view.compile_template(app, mod_name)
            content_dir = os.path.join(root_path, 'compiled', app)
            _mkdirs(content_dir)
            _gen_init_py(content_dir)
            file = os.path.join(content_dir, '%s.py' % mod_name)
            f = open(file, 'w')
            f.write(content)
            f.close()
            count += 1
    return count

def _filter(path, root_path):
    relative = path[len(root_path):].replace(os.sep, '/')
    for m in REGEX_EXCLUDES:
        if m.match(relative) is not None:
            return False
    return True

def _mkdirs(path):
    if os.path.isdir(path):
        return
    os.makedirs(path)

def _gen_init_py(package_path):
    file = open(os.path.join(package_path, '__init__.py'), 'w')
    file.write(r'''#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# DO NOT modify this file because it was generated by 'build.py'
#
''')
    file.close()

if __name__ == '__main__':
    main()
